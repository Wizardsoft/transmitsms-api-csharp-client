/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class EmailSMSController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static EmailSMSController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static EmailSMSController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new EmailSMSController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Authorise an email address for sending Email to SMS
        /// </summary>
        /// <param name="email">Required parameter: Email address to register. You may also register a wild-card email which allows any user on the same domain to use Email to SMS.  Wild-card format: *@example.com</param>
        /// <param name="number">Required parameter: Optional dedicated virtual number virtual number</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="maxSms">Optional parameter: The maximum number of SMS messages to send from one email message sent from this email address.  Possible values: 1 - up to 160 characters (default) 2 - up to 306 characters 3 - up to 459 characters 4 - up to 612 characters</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddEmail(
                string email,
                string number,
                string format,
                string maxSms = null)
        {
            Task<dynamic> t = AddEmailAsync(email, number, format, maxSms);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Authorise an email address for sending Email to SMS
        /// </summary>
        /// <param name="email">Required parameter: Email address to register. You may also register a wild-card email which allows any user on the same domain to use Email to SMS.  Wild-card format: *@example.com</param>
        /// <param name="number">Required parameter: Optional dedicated virtual number virtual number</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="maxSms">Optional parameter: The maximum number of SMS messages to send from one email message sent from this email address.  Possible values: 1 - up to 160 characters (default) 2 - up to 306 characters 3 - up to 459 characters 4 - up to 612 characters</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddEmailAsync(
                string email,
                string number,
                string format,
                string maxSms = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-email.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "email", email },
                { "number", number },
                { "max_sms", maxSms }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove an email address from the Email to SMS authorised list.
        /// </summary>
        /// <param name="email">Required parameter: Email address to remove. You may also use a wild-card email which removes all emails on that domain.  Wild-card format: *@example.com</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteEmail(string email, string format)
        {
            Task<dynamic> t = DeleteEmailAsync(email, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email address from the Email to SMS authorised list.
        /// </summary>
        /// <param name="email">Required parameter: Email address to remove. You may also use a wild-card email which removes all emails on that domain.  Wild-card format: *@example.com</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteEmailAsync(string email, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/delete-email.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "email", email }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 