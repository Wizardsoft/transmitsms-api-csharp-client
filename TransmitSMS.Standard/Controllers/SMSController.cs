/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class SMSController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SMSController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SMSController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SMSController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// The Send-SMS call is the primary method of sending SMS.
        /// You can elect to pass us the recipient numbers from your database each time you make a call, or you can elect to store recipient data in a contact list and submit only the list_id to trigger the send. This is best for large databases. To add a list please refer to the add-list call.
        /// You must provide either `to` or `list_id`.
        /// Cost data is returned in the major unit of your account currency, e.g. dollars or pounds
        /// **NOTE:** If you do not pass the 'from' parameter the messages will be sent from the shared number pool, unless you have a leased number on your account in which case it will be set as the Caller ID
        /// </summary>
        /// <param name="format">Required parameter: Response format, either `json` or `xml`. Appended to the URL path.</param>
        /// <param name="message">Required parameter: Message text. Include `[tracked-link]` if you are using the tracked link feature where you want the link to appear.</param>
        /// <param name="to">Optional parameter: **Required if `list_id` is not provided**.   Mobile number or set of up to 1000 comma separated mobile numbers to send the SMS to. If your number set has some invalid numbers, they won’t cause a validation error and will be simply ignored. Number must be defined in international format.  Some examples by destination:  AU `61491570156`, NZ `64212670129`, SG `6598654321`, UK `44750017696`, US `1213811413`</param>
        /// <param name="listId">Optional parameter: **Required if `to` is not provided**.   This is a reference to one of your stored lists.  **Note:** List ID's are made up of digits and will be returned by the add-list call, or can be found at any time by logging into your account and visiting your contacts page.</param>
        /// <param name="mfrom">Optional parameter: Set the sender ID for the message. Mobile numbers should be in international format, max 15 digits. Alphanumeric sender IDs up to 11 characters, no spaces, are available in some regions. If not set message will use the shared number option.</param>
        /// <param name="sendAt">Optional parameter: A time in the future to send the message.  **Note:** All returned timestamps are in ISO8601 format e.g. `YYYY-MM-DD HH:MM:SS`. The timezone is always UTC.</param>
        /// <param name="dlrCallback">Optional parameter: A URL which we can call to notify you of Delivery Receipts. If required, this Parameter can be different for each message sent and will take precedence over the DLR Callback URL supplied by you in the API Settings.</param>
        /// <param name="replyCallback">Optional parameter: A URL which we can call to notify you of incoming messages. If required, this parameter can be different and will take precedence over the Reply Callback URL supplied by you on the API Settings.</param>
        /// <param name="validity">Optional parameter: Specify the maximum time to attempt to deliver. In minutes, 0 (zero) implies no limit.</param>
        /// <param name="repliesToEmail">Optional parameter: Specify an email address to send responses to this message to. NOTE: specified email must be authorised to send messages via add-email or in your account under the 'Email SMS' section.</param>
        /// <param name="fromShared">Optional parameter: Forces sending via the shared number when you have virtual numbers</param>
        /// <param name="countrycode">Optional parameter: Formats numbers given to international format for this 2 letter country code. i.e. `0422222222` will become `6142222222` when `countrycode` is `AU`. Codes available `AU` Australia, `NZ` New Zealand, `SG` Singapore, `GB` United Kingdom, `US` United States</param>
        /// <param name="trackedLinkUrl">Optional parameter: Converts this URL to unique tapth.is/xxxxxx tracking link for each contact. Inserted into message with variable [tracked-link]. Clicks on this URL will be passed as notifications via 'Link hits callback URL' defined in account settings.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic SendSMS(
                string format,
                string message,
                string to = null,
                int? listId = null,
                string mfrom = null,
                string sendAt = null,
                string dlrCallback = null,
                string replyCallback = null,
                int? validity = null,
                string repliesToEmail = null,
                bool? fromShared = null,
                string countrycode = null,
                string trackedLinkUrl = null)
        {
            Task<dynamic> t = SendSMSAsync(format, message, to, listId, mfrom, sendAt, dlrCallback, replyCallback, validity, repliesToEmail, fromShared, countrycode, trackedLinkUrl);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// The Send-SMS call is the primary method of sending SMS.
        /// You can elect to pass us the recipient numbers from your database each time you make a call, or you can elect to store recipient data in a contact list and submit only the list_id to trigger the send. This is best for large databases. To add a list please refer to the add-list call.
        /// You must provide either `to` or `list_id`.
        /// Cost data is returned in the major unit of your account currency, e.g. dollars or pounds
        /// **NOTE:** If you do not pass the 'from' parameter the messages will be sent from the shared number pool, unless you have a leased number on your account in which case it will be set as the Caller ID
        /// </summary>
        /// <param name="format">Required parameter: Response format, either `json` or `xml`. Appended to the URL path.</param>
        /// <param name="message">Required parameter: Message text. Include `[tracked-link]` if you are using the tracked link feature where you want the link to appear.</param>
        /// <param name="to">Optional parameter: **Required if `list_id` is not provided**.   Mobile number or set of up to 1000 comma separated mobile numbers to send the SMS to. If your number set has some invalid numbers, they won’t cause a validation error and will be simply ignored. Number must be defined in international format.  Some examples by destination:  AU `61491570156`, NZ `64212670129`, SG `6598654321`, UK `44750017696`, US `1213811413`</param>
        /// <param name="listId">Optional parameter: **Required if `to` is not provided**.   This is a reference to one of your stored lists.  **Note:** List ID's are made up of digits and will be returned by the add-list call, or can be found at any time by logging into your account and visiting your contacts page.</param>
        /// <param name="mfrom">Optional parameter: Set the sender ID for the message. Mobile numbers should be in international format, max 15 digits. Alphanumeric sender IDs up to 11 characters, no spaces, are available in some regions. If not set message will use the shared number option.</param>
        /// <param name="sendAt">Optional parameter: A time in the future to send the message.  **Note:** All returned timestamps are in ISO8601 format e.g. `YYYY-MM-DD HH:MM:SS`. The timezone is always UTC.</param>
        /// <param name="dlrCallback">Optional parameter: A URL which we can call to notify you of Delivery Receipts. If required, this Parameter can be different for each message sent and will take precedence over the DLR Callback URL supplied by you in the API Settings.</param>
        /// <param name="replyCallback">Optional parameter: A URL which we can call to notify you of incoming messages. If required, this parameter can be different and will take precedence over the Reply Callback URL supplied by you on the API Settings.</param>
        /// <param name="validity">Optional parameter: Specify the maximum time to attempt to deliver. In minutes, 0 (zero) implies no limit.</param>
        /// <param name="repliesToEmail">Optional parameter: Specify an email address to send responses to this message to. NOTE: specified email must be authorised to send messages via add-email or in your account under the 'Email SMS' section.</param>
        /// <param name="fromShared">Optional parameter: Forces sending via the shared number when you have virtual numbers</param>
        /// <param name="countrycode">Optional parameter: Formats numbers given to international format for this 2 letter country code. i.e. `0422222222` will become `6142222222` when `countrycode` is `AU`. Codes available `AU` Australia, `NZ` New Zealand, `SG` Singapore, `GB` United Kingdom, `US` United States</param>
        /// <param name="trackedLinkUrl">Optional parameter: Converts this URL to unique tapth.is/xxxxxx tracking link for each contact. Inserted into message with variable [tracked-link]. Clicks on this URL will be passed as notifications via 'Link hits callback URL' defined in account settings.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> SendSMSAsync(
                string format,
                string message,
                string to = null,
                int? listId = null,
                string mfrom = null,
                string sendAt = null,
                string dlrCallback = null,
                string replyCallback = null,
                int? validity = null,
                string repliesToEmail = null,
                bool? fromShared = null,
                string countrycode = null,
                string trackedLinkUrl = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/send-sms.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message", message },
                { "to", to },
                { "list_id", listId },
                { "from", mfrom },
                { "send_at", sendAt },
                { "dlr_callback", dlrCallback },
                { "reply_callback", replyCallback },
                { "validity", validity },
                { "replies_to_email", repliesToEmail },
                { "from_shared", fromShared },
                { "countrycode", countrycode },
                { "tracked_link_url", trackedLinkUrl }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Format and validate a given number.
        /// </summary>
        /// <param name="msisdn">Required parameter: The number to check</param>
        /// <param name="countrycode">Required parameter: 2 Letter countrycode to validate number against</param>
        /// <param name="format">Required parameter: Response Format</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic FormatNumber(string msisdn, string countrycode, string format)
        {
            Task<dynamic> t = FormatNumberAsync(msisdn, countrycode, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Format and validate a given number.
        /// </summary>
        /// <param name="msisdn">Required parameter: The number to check</param>
        /// <param name="countrycode">Required parameter: 2 Letter countrycode to validate number against</param>
        /// <param name="format">Required parameter: Response Format</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> FormatNumberAsync(string msisdn, string countrycode, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/format-number.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "msisdn", msisdn },
                { "countrycode", countrycode }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get information about a message you have sent.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format either json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSMS(string messageId, string format)
        {
            Task<dynamic> t = GetSMSAsync(messageId, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get information about a message you have sent.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format either json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSMSAsync(string messageId, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sms.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the status about a message you have sent.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response Format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSMSStats(string messageId, string format)
        {
            Task<dynamic> t = GetSMSStatsAsync(messageId, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get the status about a message you have sent.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response Format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSMSStatsAsync(string messageId, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sms-stats.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Pick up responses to messages you have sent. Filter by keyword or for just one phone number.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="messageId">Optional parameter: Message ID</param>
        /// <param name="keywordId">Optional parameter: Keyword ID</param>
        /// <param name="keyword">Optional parameter: Keyword</param>
        /// <param name="number">Optional parameter: Filter results by response number, If keyword is set</param>
        /// <param name="msisdn">Optional parameter: Filter results by a particular mobile number</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="includeOriginal">Optional parameter: include text of original message</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSMSResponses(
                string format,
                string messageId = null,
                string keywordId = null,
                string keyword = null,
                string number = null,
                string msisdn = null,
                string page = null,
                string max = null,
                string includeOriginal = null)
        {
            Task<dynamic> t = GetSMSResponsesAsync(format, messageId, keywordId, keyword, number, msisdn, page, max, includeOriginal);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Pick up responses to messages you have sent. Filter by keyword or for just one phone number.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="messageId">Optional parameter: Message ID</param>
        /// <param name="keywordId">Optional parameter: Keyword ID</param>
        /// <param name="keyword">Optional parameter: Keyword</param>
        /// <param name="number">Optional parameter: Filter results by response number, If keyword is set</param>
        /// <param name="msisdn">Optional parameter: Filter results by a particular mobile number</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="includeOriginal">Optional parameter: include text of original message</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSMSResponsesAsync(
                string format,
                string messageId = null,
                string keywordId = null,
                string keyword = null,
                string number = null,
                string msisdn = null,
                string page = null,
                string max = null,
                string includeOriginal = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sms-responses.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId },
                { "keyword_id", keywordId },
                { "keyword", keyword },
                { "number", number },
                { "msisdn", msisdn },
                { "page", page },
                { "max", max },
                { "include_original", includeOriginal }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Pick up responses to messages you have sent. Instead of setting message ID, you should provide a time frame.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="start">Optional parameter: A timestamp to start the report from (Format yyyy-mm-dd, Timezone UTC)</param>
        /// <param name="end">Optional parameter: A timestamp to end the report at (Format yyyy-mm-dd, Timezone UTC)</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="keywords">Optional parameter: Filter if keyword responses should be included. Can be: ‘only’ - only keyword responses will be included‘omit’ - only regular campaign responses will be included  ‘both’ - both keyword and campaign responses will be included (default)</param>
        /// <param name="includeOriginal">Optional parameter: include text of original message</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetUserSMSResponses(
                string format,
                string start = null,
                string end = null,
                string page = null,
                string max = null,
                string keywords = null,
                string includeOriginal = null)
        {
            Task<dynamic> t = GetUserSMSResponsesAsync(format, start, end, page, max, keywords, includeOriginal);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Pick up responses to messages you have sent. Instead of setting message ID, you should provide a time frame.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="start">Optional parameter: A timestamp to start the report from (Format yyyy-mm-dd, Timezone UTC)</param>
        /// <param name="end">Optional parameter: A timestamp to end the report at (Format yyyy-mm-dd, Timezone UTC)</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="keywords">Optional parameter: Filter if keyword responses should be included. Can be: ‘only’ - only keyword responses will be included‘omit’ - only regular campaign responses will be included  ‘both’ - both keyword and campaign responses will be included (default)</param>
        /// <param name="includeOriginal">Optional parameter: include text of original message</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetUserSMSResponsesAsync(
                string format,
                string start = null,
                string end = null,
                string page = null,
                string max = null,
                string keywords = null,
                string includeOriginal = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-user-sms-responses.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "start", start },
                { "end", end },
                { "page", page },
                { "max", max },
                { "keywords", keywords },
                { "include_original", includeOriginal }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the list of recipients who have clicked on your tracked link.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetLinkHits(string messageId, string format)
        {
            Task<dynamic> t = GetLinkHitsAsync(messageId, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get the list of recipients who have clicked on your tracked link.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetLinkHitsAsync(string messageId, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-link-hits.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of recipients from a message send. Get up to date information such as opt-out status and delivery status.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID's are made up of digits</param>
        /// <param name="format">Required parameter: Response format e.g json or xml</param>
        /// <param name="optouts">Optional parameter: Whether to include optouts. Valid options are:    only - only get optouts   omit - do not get optouts   include - get all recipients including optouts (default)</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="delivery">Optional parameter: Only show messages with requested delivery status. Valid options are:   delivered - only show delivered messages   failed - only show failed messages   pending - only show pending messages</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSMSSent(
                string messageId,
                string format,
                string optouts = null,
                string page = null,
                string max = null,
                string delivery = null)
        {
            Task<dynamic> t = GetSMSSentAsync(messageId, format, optouts, page, max, delivery);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of recipients from a message send. Get up to date information such as opt-out status and delivery status.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID's are made up of digits</param>
        /// <param name="format">Required parameter: Response format e.g json or xml</param>
        /// <param name="optouts">Optional parameter: Whether to include optouts. Valid options are:    only - only get optouts   omit - do not get optouts   include - get all recipients including optouts (default)</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <param name="delivery">Optional parameter: Only show messages with requested delivery status. Valid options are:   delivered - only show delivered messages   failed - only show failed messages   pending - only show pending messages</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSMSSentAsync(
                string messageId,
                string format,
                string optouts = null,
                string page = null,
                string max = null,
                string delivery = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sms-sent.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId },
                { "optouts", optouts },
                { "page", page },
                { "max", max },
                { "delivery", delivery }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the delivery time of a delivered message.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="msisdn">Required parameter: Mobile number</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSMSDeliveryStatus(string messageId, string msisdn, string format)
        {
            Task<dynamic> t = GetSMSDeliveryStatusAsync(messageId, msisdn, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get the delivery time of a delivered message.
        /// </summary>
        /// <param name="messageId">Required parameter: Message ID</param>
        /// <param name="msisdn">Required parameter: Mobile number</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSMSDeliveryStatusAsync(string messageId, string msisdn, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sms-delivery-status.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId },
                { "msisdn", msisdn }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Cancel a message you have scheduled to be sent in the future.
        /// </summary>
        /// <param name="id">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CancelSMS(string id, string format)
        {
            Task<dynamic> t = CancelSMSAsync(id, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Cancel a message you have scheduled to be sent in the future.
        /// </summary>
        /// <param name="id">Required parameter: Message ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CancelSMSAsync(string id, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/cancel-sms.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get Contact SMS stats
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="mobile">Required parameter: valid phone number in international format</param>
        /// <param name="countrycode">Required parameter: required if mobile is not in international format , will default to account country code setting</param>
        /// <param name="start">Optional parameter: default to account registration date</param>
        /// <param name="end">Optional parameter: default to current date</param>
        /// <param name="sortField">Optional parameter: possible values our  "delivery_status" - possible values our hard-bounce, "soft-bounce", "delivered", "pending" "message_id" - the unique number identifying the message "datetime_send" the date and time the message was sent</param>
        /// <param name="order">Optional parameter: possible values our "asc" and "desc" default to "asc"</param>
        /// <param name="page">Optional parameter: page number for pagination</param>
        /// <param name="max">Optional parameter: maximum result returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetContactSMSStats(
                string format,
                string mobile,
                string countrycode,
                string start = null,
                string end = null,
                string sortField = null,
                string order = null,
                string page = null,
                string max = null)
        {
            Task<dynamic> t = GetContactSMSStatsAsync(format, mobile, countrycode, start, end, sortField, order, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get Contact SMS stats
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="mobile">Required parameter: valid phone number in international format</param>
        /// <param name="countrycode">Required parameter: required if mobile is not in international format , will default to account country code setting</param>
        /// <param name="start">Optional parameter: default to account registration date</param>
        /// <param name="end">Optional parameter: default to current date</param>
        /// <param name="sortField">Optional parameter: possible values our  "delivery_status" - possible values our hard-bounce, "soft-bounce", "delivered", "pending" "message_id" - the unique number identifying the message "datetime_send" the date and time the message was sent</param>
        /// <param name="order">Optional parameter: possible values our "asc" and "desc" default to "asc"</param>
        /// <param name="page">Optional parameter: page number for pagination</param>
        /// <param name="max">Optional parameter: maximum result returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetContactSMSStatsAsync(
                string format,
                string mobile,
                string countrycode,
                string start = null,
                string end = null,
                string sortField = null,
                string order = null,
                string page = null,
                string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-contact-sms-stats.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mobile", mobile },
                { "countrycode", countrycode },
                { "start", start },
                { "end", end },
                { "sort_field", sortField },
                { "order", order },
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 