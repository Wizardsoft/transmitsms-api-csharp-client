/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using TransmitSMS.Standard;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class ResellersController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ResellersController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ResellersController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ResellersController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get a list of transactions for an account.
        /// </summary>
        /// <param name="id">Required parameter: Transaction ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetTransaction(string id, string format)
        {
            Task<dynamic> t = GetTransactionAsync(id, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of transactions for an account.
        /// </summary>
        /// <param name="id">Required parameter: Transaction ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetTransactionAsync(string id, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-transaction.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Edit an existing client
        /// </summary>
        /// <param name="clientId">Required parameter: The ID of the client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="name">Optional parameter: Client company name. Must be unique</param>
        /// <param name="contact">Optional parameter: Contact name</param>
        /// <param name="password">Optional parameter: Client password</param>
        /// <param name="msisdn">Optional parameter: Client phone number</param>
        /// <param name="timezone">Optional parameter: A valid timezone, Australia/Sydney. Defaults to your own</param>
        /// <param name="clientPays">Optional parameter: Set to true if the client will pay (the default) or false if you will pay</param>
        /// <param name="smsMargin">Optional parameter: The number of cents to add to the base SMS price. A decimal value.</param>
        /// <param name="fixedTopUpAmount">Optional parameter: Fixed top up amount</param>
        /// <param name="paymentMethod">Optional parameter: Payment Method e.g. variable or fixed</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic EditClient(
                string clientId,
                string format,
                string name = null,
                string contact = null,
                string password = null,
                string msisdn = null,
                string timezone = null,
                string clientPays = null,
                string smsMargin = null,
                int? fixedTopUpAmount = null,
                string paymentMethod = null)
        {
            Task<dynamic> t = EditClientAsync(clientId, format, name, contact, password, msisdn, timezone, clientPays, smsMargin, fixedTopUpAmount, paymentMethod);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Edit an existing client
        /// </summary>
        /// <param name="clientId">Required parameter: The ID of the client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="name">Optional parameter: Client company name. Must be unique</param>
        /// <param name="contact">Optional parameter: Contact name</param>
        /// <param name="password">Optional parameter: Client password</param>
        /// <param name="msisdn">Optional parameter: Client phone number</param>
        /// <param name="timezone">Optional parameter: A valid timezone, Australia/Sydney. Defaults to your own</param>
        /// <param name="clientPays">Optional parameter: Set to true if the client will pay (the default) or false if you will pay</param>
        /// <param name="smsMargin">Optional parameter: The number of cents to add to the base SMS price. A decimal value.</param>
        /// <param name="fixedTopUpAmount">Optional parameter: Fixed top up amount</param>
        /// <param name="paymentMethod">Optional parameter: Payment Method e.g. variable or fixed</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> EditClientAsync(
                string clientId,
                string format,
                string name = null,
                string contact = null,
                string password = null,
                string msisdn = null,
                string timezone = null,
                string clientPays = null,
                string smsMargin = null,
                int? fixedTopUpAmount = null,
                string paymentMethod = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/edit-client.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "client_id", clientId },
                { "name", name },
                { "contact", contact },
                { "password", password },
                { "msisdn", msisdn },
                { "timezone", timezone },
                { "client_pays", clientPays },
                { "sms_margin", smsMargin },
                { "fixed_top_up_amount", fixedTopUpAmount },
                { "payment_method", paymentMethod }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of transactions for a client.
        /// </summary>
        /// <param name="clientId">Required parameter: Only retrieve records for a particular client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="start">Optional parameter: A timestamp to start the report from</param>
        /// <param name="end">Optional parameter: A timestamp to end the report at</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetTransactions(
                string clientId,
                string format,
                string start = null,
                string end = null,
                string page = null,
                string max = null)
        {
            Task<dynamic> t = GetTransactionsAsync(clientId, format, start, end, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of transactions for a client.
        /// </summary>
        /// <param name="clientId">Required parameter: Only retrieve records for a particular client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="start">Optional parameter: A timestamp to start the report from</param>
        /// <param name="end">Optional parameter: A timestamp to end the report at</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetTransactionsAsync(
                string clientId,
                string format,
                string start = null,
                string end = null,
                string page = null,
                string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-transactions.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "client_id", clientId },
                { "start", start },
                { "end", end },
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get detailed information about a client.
        /// </summary>
        /// <param name="clientId">Required parameter: The ID of the client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetClient(string clientId, string format)
        {
            Task<dynamic> t = GetClientAsync(clientId, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get detailed information about a client.
        /// </summary>
        /// <param name="clientId">Required parameter: The ID of the client</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetClientAsync(string clientId, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-client.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "client_id", clientId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of all clients.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetClients(string format, string page = null, string max = null)
        {
            Task<dynamic> t = GetClientsAsync(format, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of all clients.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetClientsAsync(string format, string page = null, string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-clients.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add a new client.
        /// </summary>
        /// <param name="name">Required parameter: Client company name</param>
        /// <param name="email">Required parameter: Client email address</param>
        /// <param name="password">Required parameter: Client password</param>
        /// <param name="msisdn">Required parameter: Client phone number</param>
        /// <param name="format">Required parameter: Response format e.g. json</param>
        /// <param name="contact">Optional parameter: Contact name</param>
        /// <param name="timezone">Optional parameter: A valid timezone, Australia/Sydney. Defaults to your own</param>
        /// <param name="clientPays">Optional parameter: Set to true if the client will pay (the default) or false if you will pay</param>
        /// <param name="smsMargin">Optional parameter: The number of cents to add to the base SMS price. A decimal value</param>
        /// <param name="numberMargin">Optional parameter: The number of cents to add to the base number price. A decimal value</param>
        /// <param name="fixedTopUpAmount">Optional parameter: Fixed top up amount</param>
        /// <param name="paymentMethod">Optional parameter: Payment Method e.g. variable or fixed</param>
        /// <param name="apiSecret">Optional parameter: API Secret. Note: if omitted it will be auto generated</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddClient(
                string name,
                string email,
                string password,
                string msisdn,
                string format,
                string contact = null,
                string timezone = null,
                string clientPays = null,
                string smsMargin = null,
                string numberMargin = null,
                int? fixedTopUpAmount = null,
                string paymentMethod = null,
                string apiSecret = null)
        {
            Task<dynamic> t = AddClientAsync(name, email, password, msisdn, format, contact, timezone, clientPays, smsMargin, numberMargin, fixedTopUpAmount, paymentMethod, apiSecret);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add a new client.
        /// </summary>
        /// <param name="name">Required parameter: Client company name</param>
        /// <param name="email">Required parameter: Client email address</param>
        /// <param name="password">Required parameter: Client password</param>
        /// <param name="msisdn">Required parameter: Client phone number</param>
        /// <param name="format">Required parameter: Response format e.g. json</param>
        /// <param name="contact">Optional parameter: Contact name</param>
        /// <param name="timezone">Optional parameter: A valid timezone, Australia/Sydney. Defaults to your own</param>
        /// <param name="clientPays">Optional parameter: Set to true if the client will pay (the default) or false if you will pay</param>
        /// <param name="smsMargin">Optional parameter: The number of cents to add to the base SMS price. A decimal value</param>
        /// <param name="numberMargin">Optional parameter: The number of cents to add to the base number price. A decimal value</param>
        /// <param name="fixedTopUpAmount">Optional parameter: Fixed top up amount</param>
        /// <param name="paymentMethod">Optional parameter: Payment Method e.g. variable or fixed</param>
        /// <param name="apiSecret">Optional parameter: API Secret. Note: if omitted it will be auto generated</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddClientAsync(
                string name,
                string email,
                string password,
                string msisdn,
                string format,
                string contact = null,
                string timezone = null,
                string clientPays = null,
                string smsMargin = null,
                string numberMargin = null,
                int? fixedTopUpAmount = null,
                string paymentMethod = null,
                string apiSecret = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-client.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "name", name },
                { "email", email },
                { "password", password },
                { "msisdn", msisdn },
                { "contact", contact },
                { "timezone", timezone },
                { "client_pays", clientPays },
                { "sms_margin", smsMargin },
                { "number_margin", numberMargin },
                { "fixed_top_up_amount", fixedTopUpAmount },
                { "payment_method", paymentMethod },
                { "api_secret", apiSecret }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 