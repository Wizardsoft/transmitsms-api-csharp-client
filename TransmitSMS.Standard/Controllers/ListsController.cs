/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using TransmitSMS.Standard;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class ListsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ListsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ListsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ListsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Add a member to a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to add to</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="firstName">Optional parameter: First name of the member</param>
        /// <param name="lastName">Optional parameter: Last name of the member</param>
        /// <param name="countrycode">Optional parameter: Formats msisdn for the given countrycode</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddToList(
                string listId,
                string msisdn,
                string format,
                string firstName = null,
                string lastName = null,
                string countrycode = null)
        {
            Task<dynamic> t = AddToListAsync(listId, msisdn, format, firstName, lastName, countrycode);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add a member to a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to add to</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="firstName">Optional parameter: First name of the member</param>
        /// <param name="lastName">Optional parameter: Last name of the member</param>
        /// <param name="countrycode">Optional parameter: Formats msisdn for the given countrycode</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddToListAsync(
                string listId,
                string msisdn,
                string format,
                string firstName = null,
                string lastName = null,
                string countrycode = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-to-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "msisdn", msisdn },
                { "first_name", firstName },
                { "last_name", lastName },
                { "countrycode", countrycode }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update or add custom fields to a list
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to add to</param>
        /// <param name="field1">Required parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="field2">Optional parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddFieldToList(
                string listId,
                string field1,
                string format,
                string field2 = null,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = AddFieldToListAsync(listId, field1, format, field2, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update or add custom fields to a list
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to add to</param>
        /// <param name="field1">Required parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="field2">Optional parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddFieldToListAsync(
                string listId,
                string field1,
                string format,
                string field2 = null,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-field-to-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "field_1", field1 },
                { "field_2", field2 }
            },ArrayDeserializationFormat,ParameterSeparator);

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters,ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a new list including the ability to add custom fields.
        /// </summary>
        /// <param name="name">Required parameter: name</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="field1">Optional parameter: A custom field name where n is an integer between 1 and 10. Once field names have been set they cannot be changed.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddList(
                string name,
                string format,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = AddListAsync(name, format, field1, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a new list including the ability to add custom fields.
        /// </summary>
        /// <param name="name">Required parameter: name</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="field1">Optional parameter: A custom field name where n is an integer between 1 and 10. Once field names have been set they cannot be changed.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddListAsync(
                string name,
                string format,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "name", name },
                { "field_1", field1 }
            },ArrayDeserializationFormat,ParameterSeparator);

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters,ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Opt a user out of one list or all lists.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to opt the user out of. Set this to 0 (zero) to opt out of all of your lists.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member to opt out</param>
        /// <param name="format">Required parameter: Response format e.g json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic OptoutListMember(string listId, string msisdn, string format)
        {
            Task<dynamic> t = OptoutListMemberAsync(listId, msisdn, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Opt a user out of one list or all lists.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to opt the user out of. Set this to 0 (zero) to opt out of all of your lists.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member to opt out</param>
        /// <param name="format">Required parameter: Response format e.g json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> OptoutListMemberAsync(string listId, string msisdn, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/optout-list-member.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "msisdn", msisdn }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a member from one list or all lists.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to remove from. If set to 0 (zero) the member will be removed from all lists.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteFromList(int listId, string msisdn, string format)
        {
            Task<dynamic> t = DeleteFromListAsync(listId, msisdn, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a member from one list or all lists.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list to remove from. If set to 0 (zero) the member will be removed from all lists.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteFromListAsync(int listId, string msisdn, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/delete-from-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "msisdn", msisdn }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get information about a list and its members.
        /// </summary>
        /// <param name="listId">Required parameter: List ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="members">Optional parameter: Which types of members to return. Possible values: active - only get active members (default) inactive - only get inactive members all - get active and inactive members none - do not get any members, just metadata</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetList(
                string listId,
                string format,
                string members = null,
                string page = null,
                string max = null)
        {
            Task<dynamic> t = GetListAsync(listId, format, members, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get information about a list and its members.
        /// </summary>
        /// <param name="listId">Required parameter: List ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="members">Optional parameter: Which types of members to return. Possible values: active - only get active members (default) inactive - only get inactive members all - get active and inactive members none - do not get any members, just metadata</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetListAsync(
                string listId,
                string format,
                string members = null,
                string page = null,
                string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "members", members },
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the metadata of all your lists.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetLists(string format, string page = null, string max = null)
        {
            Task<dynamic> t = GetListsAsync(format, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get the metadata of all your lists.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetListsAsync(string format, string page = null, string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-lists.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Edit a member of a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list the member belongs to</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member to edit</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="firstName">Optional parameter: First name of the member</param>
        /// <param name="lastName">Optional parameter: Last name of the member</param>
        /// <param name="field1">Optional parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday. To remove a value set it to an empty string.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic EditListMember(
                string listId,
                string msisdn,
                string format,
                string firstName = null,
                string lastName = null,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = EditListMemberAsync(listId, msisdn, format, firstName, lastName, field1, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Edit a member of a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list the member belongs to</param>
        /// <param name="msisdn">Required parameter: Mobile number of the member to edit</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="firstName">Optional parameter: First name of the member</param>
        /// <param name="lastName">Optional parameter: Last name of the member</param>
        /// <param name="field1">Optional parameter: Custom field value where n is an integer between 1 and 10. You can also use the names of the custom fields you have chosen for your list, e.g. field.birthday. To remove a value set it to an empty string.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> EditListMemberAsync(
                string listId,
                string msisdn,
                string format,
                string firstName = null,
                string lastName = null,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/edit-list-member.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "msisdn", msisdn },
                { "first_name", firstName },
                { "last_name", lastName },
                { "field.1", field1 }
            },ArrayDeserializationFormat,ParameterSeparator);

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters,ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get contact information from a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list the contact is on.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the contact.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetContact(string listId, string msisdn, string format)
        {
            Task<dynamic> t = GetContactAsync(listId, msisdn, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get contact information from a list.
        /// </summary>
        /// <param name="listId">Required parameter: ID of the list the contact is on.</param>
        /// <param name="msisdn">Required parameter: Mobile number of the contact.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetContactAsync(string listId, string msisdn, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-contact.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId },
                { "msisdn", msisdn }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Upload a list of contacts to Burst SMS
        /// </summary>
        /// <param name="name">Required parameter: Name of the list</param>
        /// <param name="fileUrl">Required parameter: URL location of the contact list (NB: The list you are uploading requires a column labelled mobile)</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="countrycode">Optional parameter: Specifies which country the numbers are to be formatted in (e.g AU). If uploading numbers for multiple countries, do not define this, you will need to ensure that all the numbers are in correct international format before upload.</param>
        /// <param name="field1">Optional parameter: Adds custom fields to the list.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddContactsBulk(
                string name,
                string fileUrl,
                string format,
                string countrycode = null,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = AddContactsBulkAsync(name, fileUrl, format, countrycode, field1, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Upload a list of contacts to Burst SMS
        /// </summary>
        /// <param name="name">Required parameter: Name of the list</param>
        /// <param name="fileUrl">Required parameter: URL location of the contact list (NB: The list you are uploading requires a column labelled mobile)</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="countrycode">Optional parameter: Specifies which country the numbers are to be formatted in (e.g AU). If uploading numbers for multiple countries, do not define this, you will need to ensure that all the numbers are in correct international format before upload.</param>
        /// <param name="field1">Optional parameter: Adds custom fields to the list.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddContactsBulkAsync(
                string name,
                string fileUrl,
                string format,
                string countrycode = null,
                string field1 = null,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-contacts-bulk.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "name", name },
                { "file_url", fileUrl },
                { "countrycode", countrycode },
                { "field_1", field1 }
            },ArrayDeserializationFormat,ParameterSeparator);

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters,ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete a list and its members.
        /// </summary>
        /// <param name="listId">Required parameter: List ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic RemoveList(string listId, string format)
        {
            Task<dynamic> t = RemoveListAsync(listId, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Delete a list and its members.
        /// </summary>
        /// <param name="listId">Required parameter: List ID</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> RemoveListAsync(string listId, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/remove-list.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "list_id", listId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 