/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using TransmitSMS.Standard;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class NumbersController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static NumbersController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static NumbersController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new NumbersController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Lease a dedicated virtual number.
        /// </summary>
        /// <param name="number">Required parameter: The virtual number to lease. Omit this field to be given a random number. Use get-numbers to find out which numbers are currently available.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic LeaseNumber(string number, string format)
        {
            Task<dynamic> t = LeaseNumberAsync(number, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lease a dedicated virtual number.
        /// </summary>
        /// <param name="number">Required parameter: The virtual number to lease. Omit this field to be given a random number. Use get-numbers to find out which numbers are currently available.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> LeaseNumberAsync(string number, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/lease-number.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "number", number }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Edit your dedicated virtual number options.
        /// </summary>
        /// <param name="number">Required parameter: The dedicated virtual number.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="forwardEmail">Optional parameter: Forward incoming messages to a set of email addresses.</param>
        /// <param name="forwardSms">Optional parameter: Forward incoming messages to a set of mobile numbers.</param>
        /// <param name="forwardUrl">Optional parameter: Forward incoming messages to a URL.</param>
        /// <param name="listId">Optional parameter: Add new numbers that message in to this list.</param>
        /// <param name="welcomeMessage">Optional parameter: Auto-response for all messages received.</param>
        /// <param name="membersMessage">Optional parameter: Auto-response if the number is already on the list. (must be adding the number to a list)</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic EditNumberOptions(
                string number,
                string format,
                string forwardEmail = null,
                string forwardSms = null,
                string forwardUrl = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null)
        {
            Task<dynamic> t = EditNumberOptionsAsync(number, format, forwardEmail, forwardSms, forwardUrl, listId, welcomeMessage, membersMessage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Edit your dedicated virtual number options.
        /// </summary>
        /// <param name="number">Required parameter: The dedicated virtual number.</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="forwardEmail">Optional parameter: Forward incoming messages to a set of email addresses.</param>
        /// <param name="forwardSms">Optional parameter: Forward incoming messages to a set of mobile numbers.</param>
        /// <param name="forwardUrl">Optional parameter: Forward incoming messages to a URL.</param>
        /// <param name="listId">Optional parameter: Add new numbers that message in to this list.</param>
        /// <param name="welcomeMessage">Optional parameter: Auto-response for all messages received.</param>
        /// <param name="membersMessage">Optional parameter: Auto-response if the number is already on the list. (must be adding the number to a list)</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> EditNumberOptionsAsync(
                string number,
                string format,
                string forwardEmail = null,
                string forwardSms = null,
                string forwardUrl = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/edit-number-options.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "number", number },
                { "forward_email", forwardEmail },
                { "forward_sms", forwardSms },
                { "forward_url", forwardUrl },
                { "list_id", listId },
                { "welcome_message", welcomeMessage },
                { "members_message", membersMessage }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of numbers either leased by you or available to be leased.
        /// </summary>
        /// <param name="filter">Required parameter: Possible values are owned - retrieve your own response numbers (default) available - retrieve response numbers available for purchase</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetNumbers(
                string filter,
                string format,
                string page = null,
                string max = null)
        {
            Task<dynamic> t = GetNumbersAsync(filter, format, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of numbers either leased by you or available to be leased.
        /// </summary>
        /// <param name="filter">Required parameter: Possible values are owned - retrieve your own response numbers (default) available - retrieve response numbers available for purchase</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetNumbersAsync(
                string filter,
                string format,
                string page = null,
                string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-numbers.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "filter", filter },
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get detailed information about a response number you have leased.
        /// </summary>
        /// <param name="number">Required parameter: The virtual number to retrieve</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetNumber(string number, string format)
        {
            Task<dynamic> t = GetNumberAsync(number, format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get detailed information about a response number you have leased.
        /// </summary>
        /// <param name="number">Required parameter: The virtual number to retrieve</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetNumberAsync(string number, string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-number.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "number", number }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get Sender ID's
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSenderIds(string format)
        {
            Task<dynamic> t = GetSenderIdsAsync(format);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get Sender ID's
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSenderIdsAsync(string format)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-sender-ids.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 