/*
 * TransmitSMS.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using TransmitSMS.Standard;
using TransmitSMS.Standard.Utilities;
using TransmitSMS.Standard.Http.Request;
using TransmitSMS.Standard.Http.Response;
using TransmitSMS.Standard.Http.Client;
using TransmitSMS.Standard.Exceptions;

namespace TransmitSMS.Standard.Controllers
{
    public partial class KeywordsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static KeywordsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static KeywordsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new KeywordsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get a list of existing keywords.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="number">Optional parameter: Filter the list by virtual number</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetKeywords(
                string format,
                string number = null,
                string page = null,
                string max = null)
        {
            Task<dynamic> t = GetKeywordsAsync(format, number, page, max);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a list of existing keywords.
        /// </summary>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="number">Optional parameter: Filter the list by virtual number</param>
        /// <param name="page">Optional parameter: Page number, for pagination</param>
        /// <param name="max">Optional parameter: Maximum results returned per page</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetKeywordsAsync(
                string format,
                string number = null,
                string page = null,
                string max = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/get-keywords.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "number", number },
                { "page", page },
                { "max", max }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add a keyword to an existing virtual number.
        /// </summary>
        /// <param name="keyword">Required parameter: The first word of a text message</param>
        /// <param name="number">Required parameter: The dedicated virtual number that the keyword belongs to</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="reference">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="listId">Optional parameter: ID of a list to add respondents to, list ID's can be found in the title of a list or in the list page URL</param>
        /// <param name="welcomeMessage">Optional parameter: SMS message to send to new members</param>
        /// <param name="membersMessage">Optional parameter: SMS message to existing members</param>
        /// <param name="activate">Optional parameter: Whether to make the keyword active immediately.  Possible values: true - activate immediately (default) false - create the keyword but do not activate</param>
        /// <param name="forwardUrl">Optional parameter: Forward messages to a URL</param>
        /// <param name="forwardEmail">Optional parameter: Forward messages to a set of email addresses</param>
        /// <param name="forwardSms">Optional parameter: Forward messages to a set of msisdns</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic AddKeyword(
                string keyword,
                string number,
                string format,
                string reference = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null,
                string activate = null,
                string forwardUrl = null,
                string forwardEmail = null,
                string forwardSms = null)
        {
            Task<dynamic> t = AddKeywordAsync(keyword, number, format, reference, listId, welcomeMessage, membersMessage, activate, forwardUrl, forwardEmail, forwardSms);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add a keyword to an existing virtual number.
        /// </summary>
        /// <param name="keyword">Required parameter: The first word of a text message</param>
        /// <param name="number">Required parameter: The dedicated virtual number that the keyword belongs to</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="reference">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="listId">Optional parameter: ID of a list to add respondents to, list ID's can be found in the title of a list or in the list page URL</param>
        /// <param name="welcomeMessage">Optional parameter: SMS message to send to new members</param>
        /// <param name="membersMessage">Optional parameter: SMS message to existing members</param>
        /// <param name="activate">Optional parameter: Whether to make the keyword active immediately.  Possible values: true - activate immediately (default) false - create the keyword but do not activate</param>
        /// <param name="forwardUrl">Optional parameter: Forward messages to a URL</param>
        /// <param name="forwardEmail">Optional parameter: Forward messages to a set of email addresses</param>
        /// <param name="forwardSms">Optional parameter: Forward messages to a set of msisdns</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddKeywordAsync(
                string keyword,
                string number,
                string format,
                string reference = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null,
                string activate = null,
                string forwardUrl = null,
                string forwardEmail = null,
                string forwardSms = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/add-keyword.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "keyword", keyword },
                { "number", number },
                { "reference", reference },
                { "list_id", listId },
                { "welcome_message", welcomeMessage },
                { "members_message", membersMessage },
                { "activate", activate },
                { "forward_url", forwardUrl },
                { "forward_email", forwardEmail },
                { "forward_sms", forwardSms }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Edit an existing keyword.
        /// </summary>
        /// <param name="keyword">Required parameter: The first word of a text message</param>
        /// <param name="number">Required parameter: The dedicated virtual number that the keyword belongs to</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="reference">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="status">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="listId">Optional parameter: ID of a list to add respondents to, list ID's can be found in the title of a list or in the list page URL</param>
        /// <param name="welcomeMessage">Optional parameter: SMS message to send to new members</param>
        /// <param name="membersMessage">Optional parameter: SMS message to existing members</param>
        /// <param name="activate">Optional parameter: Whether to make the keyword active immediately.  Possible values: true - activate immediately (default) false - create the keyword but do not activate</param>
        /// <param name="forwardUrl">Optional parameter: Forward messages to a URL</param>
        /// <param name="forwardEmail">Optional parameter: Forward messages to a set of email addresses</param>
        /// <param name="forwardSms">Optional parameter: Forward messages to a set of msisdns</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic EditKeyword(
                string keyword,
                string number,
                string format,
                string reference = null,
                string status = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null,
                string activate = null,
                string forwardUrl = null,
                string forwardEmail = null,
                string forwardSms = null)
        {
            Task<dynamic> t = EditKeywordAsync(keyword, number, format, reference, status, listId, welcomeMessage, membersMessage, activate, forwardUrl, forwardEmail, forwardSms);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Edit an existing keyword.
        /// </summary>
        /// <param name="keyword">Required parameter: The first word of a text message</param>
        /// <param name="number">Required parameter: The dedicated virtual number that the keyword belongs to</param>
        /// <param name="format">Required parameter: Response format e.g. json or xml</param>
        /// <param name="reference">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="status">Optional parameter: Your own reference (up to 100 characters)</param>
        /// <param name="listId">Optional parameter: ID of a list to add respondents to, list ID's can be found in the title of a list or in the list page URL</param>
        /// <param name="welcomeMessage">Optional parameter: SMS message to send to new members</param>
        /// <param name="membersMessage">Optional parameter: SMS message to existing members</param>
        /// <param name="activate">Optional parameter: Whether to make the keyword active immediately.  Possible values: true - activate immediately (default) false - create the keyword but do not activate</param>
        /// <param name="forwardUrl">Optional parameter: Forward messages to a URL</param>
        /// <param name="forwardEmail">Optional parameter: Forward messages to a set of email addresses</param>
        /// <param name="forwardSms">Optional parameter: Forward messages to a set of msisdns</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> EditKeywordAsync(
                string keyword,
                string number,
                string format,
                string reference = null,
                string status = null,
                string listId = null,
                string welcomeMessage = null,
                string membersMessage = null,
                string activate = null,
                string forwardUrl = null,
                string forwardEmail = null,
                string forwardSms = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/edit-keyword.{format}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "format", format }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "keyword", keyword },
                { "number", number },
                { "reference", reference },
                { "status", status },
                { "list_id", listId },
                { "welcome_message", welcomeMessage },
                { "members_message", membersMessage },
                { "activate", activate },
                { "forward_url", forwardUrl },
                { "forward_email", forwardEmail },
                { "forward_sms", forwardSms }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers, Configuration.Apikey, Configuration.Apisecret);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 